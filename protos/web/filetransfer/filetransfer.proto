syntax = "proto3";
package filetransfer;
import "google/protobuf/timestamp.proto";

option go_package = "github.com/itsrobel/sync/web/internal/services/web/filetransfer";

service FileService {
  rpc ControlStream(stream ControlMessage) returns (stream ControlMessage) {};
  rpc SendFileToServer(stream FileVersionData) returns (ActionResponse) {};
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}
// TODO: I need to get file differences
// TODO: add the directory watching to the grpc
message FileVersionData {
  string id = 1;        // Persistent unique identifier for the file *version*
  google.protobuf.Timestamp timestamp = 2;  // location of the file
  bytes content = 3;    // File content (for upload/download)
  string location = 4;// location of the file
  string file_id = 5;   // Id of the file
  string client = 6;
  int64 offset = 7;     // Offset for streaming
  int64 total_size = 8; // Total size of the file
}


//NOTE: control messages are between the client and server
//sort of like boardcasting in sockets
// The following are the list of messages we need
// -> inital
// -> NEW_FILE, we need this in order to notify clients of a new file, or file change
message ControlMessage {
    string session_id = 1;
    ControlType type = 2;
    string filename = 3;
    
    enum ControlType {
        UNKNOWN = 0;
        READY = 1;
        NEW_FILE = 2;
        PAUSE = 3;
        RESUME = 4;
        START_TRANSFER = 5;
    }
}


message ActionResponse {
  bool success = 1;
  string message = 2;
}


message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

