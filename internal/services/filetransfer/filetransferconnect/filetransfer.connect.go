// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: filetransfer/filetransfer.proto

package filetransferconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	filetransfer "github.com/itsrobel/sync/internal/services/filetransfer"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "filetransfer.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceStreamFilesProcedure is the fully-qualified name of the FileService's StreamFiles RPC.
	FileServiceStreamFilesProcedure = "/filetransfer.FileService/StreamFiles"
	// FileServiceStreamFileChangesProcedure is the fully-qualified name of the FileService's
	// StreamFileChanges RPC.
	FileServiceStreamFileChangesProcedure = "/filetransfer.FileService/StreamFileChanges"
	// FileServiceDeleteFileProcedure is the fully-qualified name of the FileService's DeleteFile RPC.
	FileServiceDeleteFileProcedure = "/filetransfer.FileService/DeleteFile"
	// FileServiceMoveFileProcedure is the fully-qualified name of the FileService's MoveFile RPC.
	FileServiceMoveFileProcedure = "/filetransfer.FileService/MoveFile"
	// FileServiceTransferFileProcedure is the fully-qualified name of the FileService's TransferFile
	// RPC.
	FileServiceTransferFileProcedure = "/filetransfer.FileService/TransferFile"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fileServiceServiceDescriptor                 = filetransfer.File_filetransfer_filetransfer_proto.Services().ByName("FileService")
	fileServiceStreamFilesMethodDescriptor       = fileServiceServiceDescriptor.Methods().ByName("StreamFiles")
	fileServiceStreamFileChangesMethodDescriptor = fileServiceServiceDescriptor.Methods().ByName("StreamFileChanges")
	fileServiceDeleteFileMethodDescriptor        = fileServiceServiceDescriptor.Methods().ByName("DeleteFile")
	fileServiceMoveFileMethodDescriptor          = fileServiceServiceDescriptor.Methods().ByName("MoveFile")
	fileServiceTransferFileMethodDescriptor      = fileServiceServiceDescriptor.Methods().ByName("TransferFile")
)

// FileServiceClient is a client for the filetransfer.FileService service.
type FileServiceClient interface {
	StreamFiles(context.Context) *connect.BidiStreamForClient[filetransfer.FileData, filetransfer.FileData]
	StreamFileChanges(context.Context) *connect.BidiStreamForClient[filetransfer.FileChange, filetransfer.FileChange]
	DeleteFile(context.Context, *connect.Request[filetransfer.FileRequest]) (*connect.Response[filetransfer.ActionResponse], error)
	MoveFile(context.Context, *connect.Request[filetransfer.MoveFileRequest]) (*connect.Response[filetransfer.ActionResponse], error)
	TransferFile(context.Context) *connect.BidiStreamForClient[filetransfer.FileData, filetransfer.FileData]
}

// NewFileServiceClient constructs a client for the filetransfer.FileService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileServiceClient{
		streamFiles: connect.NewClient[filetransfer.FileData, filetransfer.FileData](
			httpClient,
			baseURL+FileServiceStreamFilesProcedure,
			connect.WithSchema(fileServiceStreamFilesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamFileChanges: connect.NewClient[filetransfer.FileChange, filetransfer.FileChange](
			httpClient,
			baseURL+FileServiceStreamFileChangesProcedure,
			connect.WithSchema(fileServiceStreamFileChangesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFile: connect.NewClient[filetransfer.FileRequest, filetransfer.ActionResponse](
			httpClient,
			baseURL+FileServiceDeleteFileProcedure,
			connect.WithSchema(fileServiceDeleteFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveFile: connect.NewClient[filetransfer.MoveFileRequest, filetransfer.ActionResponse](
			httpClient,
			baseURL+FileServiceMoveFileProcedure,
			connect.WithSchema(fileServiceMoveFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		transferFile: connect.NewClient[filetransfer.FileData, filetransfer.FileData](
			httpClient,
			baseURL+FileServiceTransferFileProcedure,
			connect.WithSchema(fileServiceTransferFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	streamFiles       *connect.Client[filetransfer.FileData, filetransfer.FileData]
	streamFileChanges *connect.Client[filetransfer.FileChange, filetransfer.FileChange]
	deleteFile        *connect.Client[filetransfer.FileRequest, filetransfer.ActionResponse]
	moveFile          *connect.Client[filetransfer.MoveFileRequest, filetransfer.ActionResponse]
	transferFile      *connect.Client[filetransfer.FileData, filetransfer.FileData]
}

// StreamFiles calls filetransfer.FileService.StreamFiles.
func (c *fileServiceClient) StreamFiles(ctx context.Context) *connect.BidiStreamForClient[filetransfer.FileData, filetransfer.FileData] {
	return c.streamFiles.CallBidiStream(ctx)
}

// StreamFileChanges calls filetransfer.FileService.StreamFileChanges.
func (c *fileServiceClient) StreamFileChanges(ctx context.Context) *connect.BidiStreamForClient[filetransfer.FileChange, filetransfer.FileChange] {
	return c.streamFileChanges.CallBidiStream(ctx)
}

// DeleteFile calls filetransfer.FileService.DeleteFile.
func (c *fileServiceClient) DeleteFile(ctx context.Context, req *connect.Request[filetransfer.FileRequest]) (*connect.Response[filetransfer.ActionResponse], error) {
	return c.deleteFile.CallUnary(ctx, req)
}

// MoveFile calls filetransfer.FileService.MoveFile.
func (c *fileServiceClient) MoveFile(ctx context.Context, req *connect.Request[filetransfer.MoveFileRequest]) (*connect.Response[filetransfer.ActionResponse], error) {
	return c.moveFile.CallUnary(ctx, req)
}

// TransferFile calls filetransfer.FileService.TransferFile.
func (c *fileServiceClient) TransferFile(ctx context.Context) *connect.BidiStreamForClient[filetransfer.FileData, filetransfer.FileData] {
	return c.transferFile.CallBidiStream(ctx)
}

// FileServiceHandler is an implementation of the filetransfer.FileService service.
type FileServiceHandler interface {
	StreamFiles(context.Context, *connect.BidiStream[filetransfer.FileData, filetransfer.FileData]) error
	StreamFileChanges(context.Context, *connect.BidiStream[filetransfer.FileChange, filetransfer.FileChange]) error
	DeleteFile(context.Context, *connect.Request[filetransfer.FileRequest]) (*connect.Response[filetransfer.ActionResponse], error)
	MoveFile(context.Context, *connect.Request[filetransfer.MoveFileRequest]) (*connect.Response[filetransfer.ActionResponse], error)
	TransferFile(context.Context, *connect.BidiStream[filetransfer.FileData, filetransfer.FileData]) error
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceStreamFilesHandler := connect.NewBidiStreamHandler(
		FileServiceStreamFilesProcedure,
		svc.StreamFiles,
		connect.WithSchema(fileServiceStreamFilesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceStreamFileChangesHandler := connect.NewBidiStreamHandler(
		FileServiceStreamFileChangesProcedure,
		svc.StreamFileChanges,
		connect.WithSchema(fileServiceStreamFileChangesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceDeleteFileHandler := connect.NewUnaryHandler(
		FileServiceDeleteFileProcedure,
		svc.DeleteFile,
		connect.WithSchema(fileServiceDeleteFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceMoveFileHandler := connect.NewUnaryHandler(
		FileServiceMoveFileProcedure,
		svc.MoveFile,
		connect.WithSchema(fileServiceMoveFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceTransferFileHandler := connect.NewBidiStreamHandler(
		FileServiceTransferFileProcedure,
		svc.TransferFile,
		connect.WithSchema(fileServiceTransferFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/filetransfer.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceStreamFilesProcedure:
			fileServiceStreamFilesHandler.ServeHTTP(w, r)
		case FileServiceStreamFileChangesProcedure:
			fileServiceStreamFileChangesHandler.ServeHTTP(w, r)
		case FileServiceDeleteFileProcedure:
			fileServiceDeleteFileHandler.ServeHTTP(w, r)
		case FileServiceMoveFileProcedure:
			fileServiceMoveFileHandler.ServeHTTP(w, r)
		case FileServiceTransferFileProcedure:
			fileServiceTransferFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) StreamFiles(context.Context, *connect.BidiStream[filetransfer.FileData, filetransfer.FileData]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("filetransfer.FileService.StreamFiles is not implemented"))
}

func (UnimplementedFileServiceHandler) StreamFileChanges(context.Context, *connect.BidiStream[filetransfer.FileChange, filetransfer.FileChange]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("filetransfer.FileService.StreamFileChanges is not implemented"))
}

func (UnimplementedFileServiceHandler) DeleteFile(context.Context, *connect.Request[filetransfer.FileRequest]) (*connect.Response[filetransfer.ActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filetransfer.FileService.DeleteFile is not implemented"))
}

func (UnimplementedFileServiceHandler) MoveFile(context.Context, *connect.Request[filetransfer.MoveFileRequest]) (*connect.Response[filetransfer.ActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filetransfer.FileService.MoveFile is not implemented"))
}

func (UnimplementedFileServiceHandler) TransferFile(context.Context, *connect.BidiStream[filetransfer.FileData, filetransfer.FileData]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("filetransfer.FileService.TransferFile is not implemented"))
}
